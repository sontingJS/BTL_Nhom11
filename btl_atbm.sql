-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Feb 25, 2024 at 05:14 AM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `btl_atbm`
--

-- --------------------------------------------------------

--
-- Table structure for table `main_tbl`
--

CREATE TABLE `main_tbl` (
  `ID` int(10) NOT NULL,
  `definition` text NOT NULL,
  `signal_1` text NOT NULL,
  `redress` text NOT NULL,
  `name` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `main_tbl`
--

INSERT INTO `main_tbl` (`ID`, `definition`, `signal_1`, `redress`, `name`) VALUES
(-1, '', '', '', ''),
(1, 'Injection là lỗ hổng xảy ra do sự thiếu sót trong việc lọc các dữ liệu đầu vào không đáng tin cậy. Khi bạn truyền các dữ liệu chưa được lọc tới Database (Ví dụ như lỗ hổng SQL injection), tới trình duyệt (lỗ hổng XSS), tới máy chủ LDAP (lỗ hổng LDAP Injection) hoặc tới bất cứ vị trí nào khác. Vấn đề là kẻ tấn công có thể chèn các đoạn mã độc để gây ra lộ lọt dữ liệu và chiếm quyền kiểm soát trình duyệt của khách hàng.<br>\r\nMọi thông tin mà ứng dụng của bạn nhận được đều phải được lọc theo Whitelist. Bởi nếu bạn sử dụng Blacklist việc lọc thông tin sẽ rất dễ bị vượt qua (Bypass). Tính năng Pattern matching sẽ không hoạt động nếu thiết lập Blacklist.\r\n', 'Có thể thấy các lỗi SQL được hiển thị trực tiếp trên giao diện người dùng khi nhập liệu không hợp lệ.\r\nKết quả trả về từ cơ sở dữ liệu không như mong đợi, bao gồm thông tin không được hiển thị đúng, hoặc dữ liệu bị mất đi.\r\nCác kịch bản JavaScript bất ngờ được chạy khi người dùng truy cập vào các trang web.\r\nDữ liệu nhập từ người dùng được hiển thị trực tiếp trên trang web mà không được làm sạch hoặc kiểm tra.\r\nCó thể thấy các thông báo không mong muốn, các cửa sổ pop-up, hoặc các hành động không mong muốn khác trên trang web.\r\n', 'Để chống lại lỗ hổng này chỉ “đơn giản” là vấn đề bạn đã lọc đầu vào đúng cách chưa hay việc bạn cân nhắc  liệu một đầu vào có thể được tin cậy hay không. Về căn bản, tất cả các đầu vào đều phải được lọc và kiểm tra trừ trường hợp đầu vào đó chắc chắn đáng tin cậy.(Tuy nhiên việc cẩn thận kiểm tra tất cả các đầu vào là luôn luôn cần thiết).<br>\r\nVí dụ, trong một hệ thống với 1000 đầu vào, lọc thành công 999 đầu vào là không đủ vì điều này vẫn để lại một phần giống như “gót chân Asin”, có thể phá hoại hệ thống của bạn bất cứ lúc nào. Bạn có thể cho rằng đưa kết quả truy vấn SQL vào truy vấn khác là một ý tưởng hay vì cơ sở dữ liệu là đáng tin cậy. Nhưng thật không may vì đầu vào có thể gián tiếp đến từ những kẻ có ý đồ xấu. Đây được gọi là lỗi Second Order SQL Injection.<br>\r\n \r\nViệc lọc dữ liệu khá khó vì thế các bạn nên sử dụng các chức năng lọc có sẵn trong framework của mình. Các tính năng này đã được chứng minh sẽ thực hiện việc kiểm tra một cách kỹ lưỡng. Bạn nên cân nhắc sử dụng các framework vì đây là một trong các cách hiệu quả để bảo vệ máy chủ của bạn.\r\n', 'Lỗ hổng Injection (Lỗi chèn mã độc)\r\n'),
(2, 'Đây là nhóm các vấn đề có thể xảy ra trong quá trình xác thực. Có một lời khuyên là không nên tự phát triển các giải pháp mã hóa vì rất khó có thể làm được chính xác.<br>\r\nCó rất nhiều rủi ro có thể gặp phải trong quá trình xác thực:<br>\r\nURL có thể chứa Session ID và rò rỉ nó trong Referer Header của người dùng khác.<br>\r\nMật khẩu không được mã hóa hoặc dễ giải mã trong khi lưu trữ.<br>\r\nLỗ hổng Session Fixation.<br>\r\nTấn công Session Hijacking có thể xảy ra khi thời gian hết hạn của session không được triển khai đúng hoặc sử dụng HTTP (không bảo mật SSL)\r\n', '   Người dùng có thể truy cập vào tài khoản của người khác mà không cần thông tin xác thực chính xác như tên người dùng và mật khẩu.<br>\r\n   Có thể truy cập vào các tài khoản quản trị hoặc tài khoản có quyền hạn cao mà không cần xác thực.<br>\r\n   Phiên làm việc (session) không được quản lý chặt chẽ, dẫn đến khả năng tái sử dụng phiên làm việc (session hijacking).<br>\r\n   Phiên làm việc có thể bị đoán được hoặc ăn cắp bởi người tấn công.<br>\r\n   Có thể thu thập thông tin xác thực như tên người dùng, mật khẩu, hoặc token thông qua các kỹ thuật như sniffing trên mạng, phishing, hoặc các kỹ thuật khác.<br>\r\n   Có thể xuất hiện các thông báo lỗi không an toàn như \"mật khẩu sai\" hoặc \"tên người dùng không tồn tại\", giúp người tấn công dễ dàng đoán được thông tin xác thực.<br>\r\n   Sử dụng các mã thông báo yếu hoặc dễ đoán có thể dẫn đến việc người tấn công tái tạo lại mã thông báo và xâm nhập vào hệ thống.\r\n', 'Cách đơn giản nhất để tránh lỗ hổng bảo mật web này là sử dụng một framework. Trong trường hợp bạn muốn tự tạo ra bộ xác thực hoặc mã hóa cho riêng mình, hãy nghĩ đến những rủi ro mà bạn sẽ gặp phải và tự cân nhắc kĩ trước khi thực hiện.', 'Lỗ Hổng Broken Authentication\r\n'),
(3, 'Lỗ hổng XSS (Cross-site Scripting) là một lỗ hổng rất phổ biến. Kẻ tấn công chèn các đoạn mã độc JavaScript vào ứng dụng web. Khi đầu vào này không được lọc, chúng sẽ được thực thi mã độc trên trình duyệt của người dùng. Kẻ tấn công có thể lấy được cookie của người dùng trên hệ thống hoặc lừa người dùng đến các trang web độc hại.', 'Người dùng thấy các đoạn mã HTML hoặc JavaScript xuất hiện trên trang web mà không có dấu hiệu của hành động của họ.<br>\r\n   Các đoạn mã này thường là kết quả của việc nhập liệu từ người dùng mà không được làm sạch hoặc kiểm tra kỹ lưỡng.<br>\r\n   Có thể thấy các thông báo lỗi không mong muốn, các cửa sổ pop-up, hoặc các hành động không mong muốn khác xuất hiện trên trang web một cách bất ngờ.<br>\r\n   Những hành động này có thể là kết quả của việc chèn các đoạn mã tấn công vào trang web thông qua lỗ hổng XSS.<br>\r\n   Có thể thấy các phần của trang web bị thay đổi một cách không mong muốn, bao gồm việc chèn nội dung hoặc các liên kết không an toàn.<br>\r\n   Các yêu cầu HTTP không mong muốn có thể được gửi từ trình duyệt của người dùng tới máy chủ, thực hiện các hành động như đánh cắp cookie, thông tin phiên làm việc, hoặc thậm chí thay đổi dữ liệu trên máy chủ.<br>\r\n   Các thông tin như tên người dùng, mật khẩu, hoặc thông tin cá nhân khác có thể bị đánh cắp thông qua lỗ hổng XSS và được chuyển đến các bên thứ ba không đáng tin cậy.<br>\r\n', 'Có một cách bảo mật web đơn giản đó là không trả lại thẻ HTML cho người dùng. Điều này còn giúp chống lại HTML Injection – Một cuộc tấn công tương tự mà hacker tấn công vào nội dung HTML – không gây ảnh hưởng nghiêm trọng nhưng khá rắc rối cho người dùng. Thông thường cách giải quyết đơn giản chỉ là Encode (chuyển đổi vê dạng dữ liệu khác) tất cả các thẻ HTML.<br> Ví dụ thẻ script được trả về dưới dạng script & gt.', ' Lỗ Hổng XSS (Cross Site Scripting)\r\n'),
(4, 'Đây là trường hợp điển hình của việc cho rằng đầu vào của người dùng là tin cậy từ đó dẫn đến lỗ hổng bảo mật. Lỗ hổng này xảy ra khi chương trình cho phép người dùng truy cập các tài nguyên (dữ liệu, file, database). Nếu không thực hiện quá trình kiểm soát quyền hạn (hoặc quá trình này không hoàn chỉnh) kẻ tấn công có thể truy cập một cách bất hợp pháp vào các dữ liệu nhạy cảm, quan trọng trên máy chủ.', 'Người dùng có thể truy cập các đối tượng mà họ không có quyền truy cập thông qua việc thay đổi tham số trong URL hoặc các yêu cầu HTTP.<br>\r\n   Có thể thấy các tham số trong URL hoặc trong yêu cầu HTTP có thể được thay đổi một cách dễ dàng để truy cập vào các đối tượng khác nhau.<br>\r\n\r\n   Các đối tượng nhạy cảm như thông tin người dùng, dữ liệu tài khoản, hoặc dữ liệu quan trọng khác có thể bị truy cập hoặc thay đổi mà không có sự kiểm soát.<br>\r\n   Dữ liệu nhạy cảm có thể bị rò rỉ hoặc tiết lộ ra bên ngoài thông qua lỗ hổng IDOR, khi người dùng không được kiểm soát quyền truy cập vào các đối tượng.<br>\r\n   Kẻ tấn công có thể thay đổi các tham số trong yêu cầu để xem dữ liệu của người dùng khác hoặc thậm chí của quản trị viên.\r\n', 'Thực hiện phân quyền người dùng đúng cách và nhất quán với sự áp dụng triệt để các Whitelist.', 'Lỗ Hổng Insecure Direct Object References\r\n'),
(5, 'Trong thực tế, máy chủ website và các ứng dụng đa số bị cấu hình sai. Có lẽ do một vài sai sót như:<br>\r\nChạy ứng dụng khi chế độ debug được bật.\r\nDirectory listing.\r\nSử dụng phần mềm lỗi thời (WordPress plugin, PhpMyAdmin cũ).\r\nCài đặt các dịch vụ không cần thiết.\r\nKhông thay đổi default key hoặc mật khẩu.\r\nTrả về lỗi xử lý thông tin cho kẻ tấn công lợi dụng để tấn công, chẳng hạn như stack traces.\r\n', '   - Trang web hiển thị thông tin debug nhạy cảm như stack trace, mã lỗi, hoặc thông tin phiên bản phần mềm.\r\n   - Thông tin này có thể được kẻ tấn công sử dụng để tìm ra lỗ hổng hoặc điểm yếu của hệ thống.\r\n   - Sử dụng các cấu hình máy chủ web và ứng dụng không an toàn, bao gồm mở rộng các phương pháp HTTP không an toàn, cho phép truy cập trực tiếp vào tệp tin cấu hình, hoặc cho phép các yêu cầu không an toàn như CORS (Cross-Origin Resource Sharing).\r\n   Hệ thống hoặc ứng dụng không được cập nhật đều đặn, không áp dụng các bản vá bảo mật mới nhất từ nhà sản xuất.<br>\r\n   Các lỗ hổng bảo mật cơ bản có thể được kẻ tấn công tận dụng để xâm nhập vào hệ thống.<br>\r\n   Các tài nguyên và chức năng không cần thiết có thể được phép truy cập mà không cần xác thực hoặc kiểm tra quyền hạn, tạo điều kiện cho các cuộc tấn công.<br>\r\n   Thiếu các biện pháp bảo mật chuẩn mực như mã hóa dữ liệu, quản lý phiên làm việc (session), hoặc kiểm tra đầu vào của người dùng.<br>\r\n', 'Có một quá trình xây dựng ứng dụng an toàn. Cần một quá trình audit lỗ hổng bảo mật trên máy chủ trước khi triển khai.', 'Lỗ Hổng Security Misconfiguration\r\n'),
(6, 'Lỗ hổng này thuộc về khía cạnh crypto và tài nguyên. Dữ liệu nhạy cảm phải được mã hóa mọi lúc, bao gồm cả khi gửi đi và khi lưu trữ – không được phép có ngoại lệ. <br>Thông tin thẻ tín dụng và mật khẩu người dùng không bao giờ được gửi đi hoặc được lưu trữ không được mã hóa. Rõ ràng thuật toán mã hóa và hashing không phải là một cách bảo mật yếu. Ngoài ra, các tiêu chuẩn an ninh web đề nghị sử dụng AES (256 bit trở lên) và RSA (2048 bit trở lên).<br>\r\nCần phải nói rằng các Session ID và dữ liệu nhạy cảm không nên được truyền trong các URL và cookie nhạy cảm nên có cờ an toàn.\r\n', '   Dữ liệu nhạy cảm được truyền qua mạng bằng các giao thức không an toàn như HTTP thường chứa trong các yêu cầu URL, dễ bị đánh cắp bởi kẻ tấn công.<br>\r\n   Dữ liệu nhạy cảm được hiển thị trên giao diện người dùng mà không có bất kỳ biện pháp bảo mật nào, như hiển thị trên URL, trong nguồn HTML, hoặc trong các tệp log.\r\n', 'Sử dụng HTTPS có chứng chỉ phù hợp và PFS (Perfect Forward Secrecy). Không nhận bất cứ thông tin gì trên các kết nối không phải là HTTPS. Có cờ an toàn trên cookie.<br>\r\nBạn cần hạn chế các dữ liệu nhạy cảm có khả năng bị lộ của mình. Nếu bạn không cần những dữ liệu nhạy cảm này, hãy hủy nó. Dữ liệu bạn không có không thể bị đánh cắp.<br>\r\nKhông bao giờ lưu trữ thông tin thẻ tín dụng, nếu không muốn phải đối phó với việc tuân thủ PCI. Hãy đăng ký một bộ xử lý thanh toán như Stripe hoặc Braintree.<br>\r\nNếu bạn có dữ liệu nhạy cảm mà bạn thực sự cần, lưu trữ mã hóa nó và đảm bảo rằng tất cả các mật khẩu được sử dụng hàm Hash để bảo vệ. Đối với Hash, nên sử dụng bcrypt. Nếu bạn không sử dụng mã hóa bcrypt, hãy tìm hiểu về mã Salt để ngăn ngừa rainbow table attack.<br>\r\nKhông lưu trữ các khóa mã hóa bên cạnh dữ liệu được bảo vệ. Việc này giống như khóa xe mà cắm chìa luôn ở đó. Bảo vệ bản sao lưu của bạn bằng mã hóa và đảm bảo các khóa của bạn là riêng tư.\r\n', 'Lỗ Hổng Sensitive data exposure (Rò rỉ dữ liệu nhạy cảm)\r\n'),
(7, 'Đây chỉ là sai sót trong vấn đề phân quyền. Nó có nghĩa là khi một hàm được gọi trên máy chủ, quá trình phân quyền không chính xác. Các nhà phát triển dựa vào thực tế là phía máy chủ tạo ra giao diện người dùng và họ nghĩ rằng khách hàng không thể truy cập các chức năng nếu không được cung cấp bởi máy chủ.<br>\r\nTuy nhiên, kẻ tấn công luôn có thể yêu cầu các chức năng “ẩn” và sẽ không bị cản trở bởi việc giao diện người dùng không cho phép thực hiện các chức năng này. Hãy tưởng tượng trong giao diện người dùng chỉ có bảng điều khiển/admin và nút nếu người dùng thực sự là quản trị viên. Không có gì ngăn cản kẻ tấn công phát hiện ra những tính năng này và lạm dụng nó nếu không phân quyền.\r\n', '', 'Ở phía máy chủ, phải luôn được phân quyền một cách triệt để từ khâu thiết kế. Không có ngoại lệ – mọi lỗ hổng sẽ dẫn đến đủ các vấn đề nghiêm trọng.', 'Lỗ Hổng Missing function level access control (lỗi phân quyền)\r\n'),
(8, 'Đây là một ví dụ của cuộc tấn công deputy attack. Trình duyệt bị đánh lừa bởi một số bên thứ ba lạm dụng quyền hạn.\r\n', '', 'Lưu trữ một Token bí mật trong một trường form ẩn mà không thể truy cập được từ trang web của bên thứ ba. Tất nhiên bạn phải xác minh trường ẩn này. Một số trang web yêu cầu mật khẩu của bạn cũng như khi sửa đổi các cài đặt nhạy cảm.', 'Lỗ Hổng Cross Site Request Forgery (CSRF)\r\n'),
(9, 'Đây là vấn đề xảy ra khi sử dụng các bộ thư viện đã tồn tại lỗ hổng. Trước khi tích hợp một mã nguồn mới vào website, hãy thực hiện một số nghiên cứu hoặc kiểm tra bảo mật. Sử dụng mã nguồn mà bạn nhận được từ một người ngẫu nhiên trên GitHub hoặc một số diễn đàn có thể rất thuận tiện. Nhưng hãy sẵn sàng trước nguy cơ đối diện với một lỗ hổng bảo mật web nghiêm trọng.<br>\r\nVí dụ: Nhiều trường hợp, trang admin bị lộ không phải vì các lập trình viên sai sót, mà vì phần mềm của bên thứ ba vẫn chưa được cập nhật. Nếu bạn nghĩ rằng họ sẽ không tìm thấy cài đặt phpmyadmin ẩn của bạn, hãy tìm hiểu về dirbuster.\r\n', '   Các hoạt động không mong muốn như thay đổi thông tin cá nhân, thực hiện các giao dịch tài chính, hoặc thực hiện hành động khác mà người dùng không mong muốn có thể là dấu hiệu của cuộc tấn công CSRF.<br>\r\n   Người dùng thấy các yêu cầu HTTP không mong muốn được gửi từ trình duyệt của họ khi họ truy cập vào một trang web hoặc kích hoạt một hành động cụ thể.<br>\r\nDữ liệu trên trang web bị thay đổi mà không cần sự xác nhận hoặc quyết định từ người dùng, và các thay đổi này có thể là kết quả của cuộc tấn công CSRF.<br>\r\n   Người dùng thấy rằng họ đã thực hiện một hành động mà họ không nhớ hoặc không cần xác thực lại, đặc biệt là các hành động nhạy cảm hoặc quan trọng.<br>\r\n   Có sự thay đổi không lường trước trong dữ liệu của người dùng, bao gồm thông tin cá nhân, tài khoản ngân hàng, hoặc các cài đặt khác có thể là một dấu hiệu của cuộc tấn công CSRF.\r\n', 'Chú ý cẩn thận khi sử dụng các thành phần của bên thứ 3, không nên là một coder copy-paste. Kiểm tra cẩn thận các đoạn code quan trọng của bạn. Nếu các đoạn code này có lỗ hổng, tin tặc có thể đọc cơ sở dữ liệu, tệp tin cấu hình, mật khẩu… của bạn.<br>\r\nCập nhật mọi thứ: Đảm bảo bạn đang sử dụng phiên bản mới nhất của tất cả mọi thứ và có kế hoạch cập nhật chúng thường xuyên. Ít nhất là đăng ký bản tin về các lỗ hổng bảo mật mới liên quan đến sản phẩm.\r\n', 'Lỗ Hổng Using component with known vulnerabilities\r\n'),
(10, 'Đây lại là vấn đề về lọc đầu vào. Giả sử rằng trang đích có một mô-đun redirect.php lấy URL làm tham số. Thao tác với tham số này có thể tạo ra một URL trên targetite.com chuyển hướng trình duyệt đến địa chỉ malwareinstall.com. Khi người dùng nhìn thấy liên kết, họ sẽ thấy liên kết targetite.com/blahblahblah tin cậy và truy cập vào. Họ ít biết rằng địa chỉ này thực ra chuyển tới trang nhúng phần mềm độc hại (hoặc bất kỳ trang độc hại khác). Ngoài ra, kẻ tấn công có thể chuyển hướng trình duyệt sang targetite.com/deleteprofile?confirm=1.', '   Phiên bản của các thư viện, framework hoặc các thành phần khác được sử dụng trong ứng dụng không phải là phiên bản mới nhất hoặc đã được vá lỗi.<br>\r\n   Thường thấy các thông báo hoặc bản vá bảo mật mới được công bố cho các phiên bản này.\r\n', 'Không sử dụng chức năng chuyển hướng.\r\nCó một danh sách tĩnh các vị trí hợp lệ để chuyển hướng đến.\r\nCó Whitelist tham số người dùng xác định.\r\n', 'Lỗ Hổng Unvalidated redirects and forwards\r\n'),
(11, 'Đây chỉ là sai sót trong vấn đề phân quyền. Nó có nghĩa là khi một hàm được gọi trên máy chủ, quá trình phân quyền không chính xác. Các nhà phát triển dựa vào thực tế là phía máy chủ tạo ra giao diện người dùng và họ nghĩ rằng khách hàng không thể truy cập các chức năng nếu không được cung cấp bởi máy chủ.<br>\r\nTuy nhiên, kẻ tấn công luôn có thể yêu cầu các chức năng “ẩn” và sẽ không bị cản trở bởi việc giao diện người dùng không cho phép thực hiện các chức năng này. Hãy tưởng tượng trong giao diện người dùng chỉ có bảng điều khiển/admin và nút nếu người dùng thực sự là quản trị viên. Không có gì ngăn cản kẻ tấn công phát hiện ra những tính năng này và lạm dụng nó nếu không phân quyền.\r\n', 'Có thể dễ dàng đoán được các URL hoặc tham số yêu cầu để truy cập vào các chức năng không được công khai.<br>\r\nNgười dùng có thể thực hiện các thao tác như thêm, xóa, sửa đổi dữ liệu mà không có quyền hạn tương ứng.<br>\r\n Có sự chênh lệch giữa chức năng mà người dùng có thể truy cập và quyền hạn mà họ được phép sử dụng.<br>\r\nNgười dùng có thể truy cập vào dữ liệu nhạy cảm hoặc các tính năng quản trị mà không cần xác thực.\r\n', 'Ở phía máy chủ, phải luôn được phân quyền một cách triệt để từ khâu thiết kế. Không có ngoại lệ – mọi lỗ hổng sẽ dẫn đến đủ các vấn đề nghiêm trọng.', 'Lỗ Hổng Injection Attacks'),
(12, 'CSRF là một loại tấn công trong đó kẻ tấn công lừa người dùng thực hiện các hành động không mong muốn trên các trang web họ đang đăng nhập.', 'Sự thực hiện các hành động không mong muốn trên trang web mà người dùng đã đăng nhập mà không cần xác thực.\r\n', 'Sử dụng kỹ thuật như token CSRF, kiểm tra referer header, và sử dụng phương thức POST thay vì GET cho các hành động quan trọng.\r\n', 'Lỗ Hổng Cross-Site Request Forgery (CSRF)'),
(13, 'Lỗ hổng này xảy ra khi các cơ chế xác thực và phiên làm việc không được triển khai một cách an toàn, dẫn đến việc kẻ tấn công có thể đánh cắp thông tin đăng nhập hoặc giả mạo danh tính người dùng.\r\n', 'Các dấu hiệu bao gồm việc sử dụng mật khẩu yếu, không bảo vệ phiên đăng nhập, hoặc không phải làm mới token phiên.\r\n', 'Sử dụng các biện pháp bảo mật như mã hóa mật khẩu, sử dụng các kỹ thuật xác thực hai yếu tố, và cập nhật định kỳ để bảo vệ trước các lỗ hổng mới.\r\n', 'Lỗ Hổng Broken Authentication'),
(14, 'Lỗ hổng này xảy ra khi dữ liệu nhạy cảm không được bảo vệ đúng cách, dẫn đến việc kẻ tấn công có thể đánh cắp thông tin.\r\n', 'Dữ liệu nhạy cảm được lưu trữ hoặc truyền đi dưới dạng văn bản không được mã hóa, sử dụng thuật toán mã hóa yếu.\r\n', 'Sử dụng mã hóa mạnh mẽ để bảo vệ dữ liệu nhạy cảm, sử dụng giao thức HTTPS để truyền dữ liệu qua mạng.\r\n', 'Lỗ Hổng Sensitive Data Exposure'),
(15, 'Lỗ hổng này xảy ra khi ứng dụng web không kiểm tra quyền truy cập của người dùng đến các đối tượng trực tiếp, cho phép kẻ tấn công truy cập hoặc sửa đổi dữ liệu mà họ không được phép.\r\n', 'Người dùng có thể truy cập hoặc sửa đổi thông tin của các đối tượng khác mà họ không được phép, thường qua các tham số trong URL hoặc các yêu cầu HTTP.\r\n', 'Áp dụng kiểm tra quyền truy cập chặt chẽ dựa trên vai trò và quyền hạn của người dùng, không sử dụng thông tin trực tiếp như ID hoặc tên của đối tượng để xác định quyền truy cập.\r\n', 'Lỗ Hổng Insecure Direct Object References (IDOR)'),
(16, 'Lỗ hổng này xảy ra khi cấu hình hệ thống, máy chủ, ứng dụng web, hoặc các thành phần khác không được thiết lập hoặc cấu hình đúng cách, tạo điều kiện thuận lợi cho kẻ tấn công tìm ra các lỗ hổng.\r\n', 'Sự tồn tại của thông tin cấu hình mặc định, thiết lập quyền truy cập sai, hoặc sử dụng các phiên bản phần mềm cũ và có lỗi đã được công bố.\r\n', 'cấu hình hệ thống và ứng dụng web một cách an toàn, xóa thông tin cấu hình mặc định, thực hiện kiểm tra bảo mật định kỳ, và cập nhật phiên bản phần mềm thường xuyên.\r\n', 'Lỗ Hổng Security Misconfiguration'),
(17, 'XXE là một loại tấn công cho phép kẻ tấn công thực hiện các cuộc tấn công kiểu DDoS, phát hiện cấu trúc hệ thống, hoặc đọc dữ liệu từ các file hệ thống bằng cách sử dụng XML tải từ các nguồn bên ngoài.\r\n', 'Sự xuất hiện của các yêu cầu XML chứa tham chiếu đối với các thực thể bên ngoài.\r\n', 'Vô hiệu hóa hoặc hạn chế việc sử dụng các tính năng XML có thể thực hiện các thực thể bên ngoài, sử dụng bộ lọc để ngăn chặn thực thể không an toàn, và sử dụng các phương pháp khác nhau để xử lý XML an toàn.\r\n', 'Lỗ Hổng XML External Entity (XXE) Attacks'),
(18, 'Lỗ hổng này xảy ra khi ứng dụng web không kiểm tra và xác thực dữ liệu được deserialized từ đầu vào nguy hiểm, có thể dẫn đến việc thực thi mã độc hại hoặc thay đổi dữ liệu trong ứng dụng.\r\n', 'Sự xuất hiện của các lỗi deserialization trong logs hoặc các biểu hiện của việc thực thi mã không mong muốn.\r\n', 'Sử dụng các giải pháp như cấu hình môi trường deserialization an toàn, kiểm tra và xác thực dữ liệu deserialized, và hạn chế quyền truy cập đến các lớp và phương thức quan trọng.\r\n', 'Lỗ Hổng Insecure Deserialization'),
(19, ' Lỗ hổng này xảy ra khi ứng dụng web cho phép người dùng chuyển hướng đến các URL bên ngoài mà không được kiểm tra hoặc xác thực, có thể dẫn đến việc lừa đảo hoặc phishing.\r\n', 'Các liên kết chuyển hướng hoặc chuyển tiếp mà không được kiểm tra cẩn thận, có thể dẫn đến các URL không an toàn.\r\n', 'Sử dụng các URL tĩnh hoặc xác định các URL hợp lệ cho chuyển hướng, và kiểm tra cẩn thận đầu vào người dùng trước khi thực hiện chuyển hướng hoặc chuyển tiếp.\r\n', 'Lỗ Hổng Unvalidated Redirects and Forwards'),
(20, 'Lỗ hổng này xảy ra khi ứng dụng web không kiểm tra cẩn thận các tệp được tải lên từ người dùng, có thể dẫn đến việc thực thi mã độc hại hoặc tải lên các tệp không mong muốn.\r\n', 'Sự xuất hiện của các tệp không mong muốn hoặc các loại tệp không an toàn trong hệ thống.\r\n', 'Xác thực và kiểm tra các tệp được tải lên, giới hạn loại tệp và kích thước tệp, lưu trữ tệp tải lên ở nơi an toàn và không thực thi trực tiếp.\r\n', 'Lỗ Hổng File Upload Vulnerabilities'),
(21, 'Lỗ hổng này xảy ra khi kẻ tấn công có thể tạo ra các yêu cầu từ phía máy chủ để tấn công các hệ thống nội bộ hoặc các nguồn tài nguyên khác mà máy chủ có thể truy cập.\r\n', 'Sự xuất hiện của các yêu cầu không mong muốn từ máy chủ tới các nguồn tài nguyên nội bộ.\r\n', 'Hạn chế quyền truy cập mạng của máy chủ, sử dụng các phương tiện kiểm soát truy cập để ngăn chặn các yêu cầu SSRF, và xác thực và kiểm tra cẩn thận các URL và yêu cầu từ người dùng.\r\n', 'Lỗ Hổng Server-Side Request Forgery (SSRF)'),
(22, 'Lỗ hổng này xảy ra khi dữ liệu nhạy cảm được lưu trữ trong hệ thống mà không được mã hóa hoặc mã hóa không đủ mạnh, dẫn đến việc dễ dàng bị đánh cắp.\r\n', 'Dữ liệu nhạy cảm được lưu trữ dưới dạng văn bản không mã hóa hoặc sử dụng các thuật toán mã hóa yếu.\r\n', 'Sử dụng các thuật toán mã hóa mạnh mẽ và phương pháp an toàn để lưu trữ dữ liệu nhạy cảm, như AES (Advanced Encryption Standard) và RSA (Rivest-Shamir-Adleman).\r\n', 'Lỗ Hổng Insecure Cryptographic Storage'),
(23, 'Lỗ hổng này xảy ra khi hệ thống không ghi nhận và theo dõi đủ thông tin về các hoạt động của người dùng và hệ thống, làm giảm khả năng phát hiện và ứng phó với các cuộc tấn công.\r\n', 'Thiếu các bản ghi log hoặc log không đủ chi tiết về các sự kiện quan trọng trong hệ thống.\r\n', 'Thực hiện ghi nhận log đầy đủ và chi tiết về các hoạt động của người dùng và hệ thống, đảm bảo rằng các sự kiện bất thường được theo dõi và báo cáo.\r\n', 'Lỗ Hổng Insufficient Logging & Monitoring'),
(24, 'Lỗ hổng này xảy ra khi hai hoặc nhiều quy trình hoặc luồng trong hệ thống cố gắng truy cập và thay đổi dữ liệu cùng một lúc, dẫn đến tình trạng không nhất quán hoặc không an toàn.\r\n', 'dữ liệu hoặc trạng thái của hệ thống thay đổi không nhất quán hoặc không dự đoán được.\r\n', 'Sử dụng các phương thức đồng bộ hóa và khóa để đảm bảo rằng chỉ một quy trình hoặc luồng có thể truy cập và thay đổi dữ liệu tại một thời điểm.\r\n', 'Lỗ Hổng Race Conditions'),
(25, 'Lỗ hổng này xảy ra khi API không được bảo vệ chặt chẽ hoặc thiết kế không an toàn, dẫn đến việc tấn công và truy cập không ủy quyền vào dữ liệu và chức năng của hệ thống.\r\n', 'Sự xuất hiện của các yêu cầu không chính xác, không xác thực hoặc không ủy quyền đến các endpoint API.\r\n', 'Sử dụng các biện pháp bảo mật như xác thực bằng mã thông báo (token-based authentication), giới hạn quyền truy cập, mã hóa dữ liệu, và kiểm tra đầu vào của người dùng.\r\n', 'Lỗ Hổng Insecure API'),
(26, 'Buffer-overflow là 1 lỗi phần mềm có thể bị khai thác bởi hacker để thực hiện các truy cập trái phép đối với hệ thống. Đây là 1 trong những lỗ hổng bảo mật được biết đến nhiều nhất nhưng vẫn còn phổ biến cho tới hiện nay. Điều này là do tràn bộ đệm có thể xảy ra theo nhiều cách và các kỹ thuật ngăn chặn điều này thì lại dễ xảy ra lỗi.<br>\r\nMột cuộc tấn công tràn bộ đệm diễn ra khi kẻ tấn công thao túng lỗi này để thực hiện các hành động độc hại và xâm phạm hệ thống bị ảnh hưởng. Kẻ tấn công thay đổi đường dẫn thực thi của ứng dụng và ghi đè các thành phần trong bộ nhớ của ứng dụng, điều này sửa đổi đường dẫn thực thi của chương trình để làm hỏng các tệp hiện có hoặc làm lộ dữ liệu.<br>\r\nKỹ thuật để khai thác lỗ hổng này được hacker sử dụng còn tùy thuộc vào kiến trúc và hệ điều hành máy tính của nạn nhân. Dữ liệu mà hacker thêm vào có thể chứa mã độc cho phép kẻ tấn công thực hiện các hành động khác trên các ứng dụng.', 'Lỗi tràn bộ đệm xảy ra khi lượng dữ liệu trong bộ đệm vượt quá dung lượng lưu trữ. Dữ liệu sẽ tràn sang vị trí các bộ nhớ lân cận để ghi đè hoặc làm hỏng dữ liệu tại vị trí đó.\r\n', 'Các hệ điều hành hiện đại hiện đang triển khai bảo vệ thời gian chạy cho phép bảo mật bổ sung chống lại tràn bộ đệm. Điều này bao gồm các tính năng bảo mật như:<br>\r\nAddress space layout randomization (ASLR): Các cuộc tấn công tràn bộ đệm thường cần phải biết mã thực thi được đặt ở đâu. ASLR di chuyển ngẫu nhiên xung quanh các vị trí của các vùng dữ liệu để ngẫu nhiên hóa không gian địa chỉ, điều này khiến các cuộc tấn công tràn gần như không thể.<br>\r\nData execution prevention: Phương pháp này ngăn chặn một cuộc tấn công không thể chạy mã ở các vùng không thể thực hiện được bằng cách gắn cờ các khu vực bộ nhớ là thực thi hoặc không thể thực hiện được.<br>\r\nStructured exception handling overwrite protection (SEHOP): Những kẻ tấn công có thể tìm cách ghi đè lên xử lý ngoại lệ có cấu trúc (SEH), đây là một hệ thống tích hợp, quản lý các ngoại lệ phần cứng và phần mềm. Kẻ tấn công thực hiện điều này thông qua một cuộc tấn công stack-based overflow để ghi các bản ghi đăng ký ngoại lệ, được lưu trữ trên ngăn xếp của chương trình. SEHOP ngăn mã độc hại của kẻ tấn công có thể tấn công SEH và sử dụng kỹ thuật khai thác ghi đè.\r\n', 'Lỗ Hổng buffer-overflow (Tràn bộ đệm)'),
(27, 'Privilege là một cách thức phổ biến để tin tặc có thể truy cập trái phép vào một hệ thống được bảo vệ. Những kẻ tấn công thường tìm một điểm yếu trong hệ thống phòng thủ của tổ chức và khai thác điểm yếu này để giành quyền truy cập vào hệ thống. Trong đa số các trường hợp, điểm xâm nhập đầu tiên sẽ không cung cấp cho tin tặc mức độ truy cập hay dữ liệu mà họ cần. Sau đó, họ cố gắng khai thác những lỗ hổng trong hệ thống hoặc sử dụng những công cụ cụ thể để vượt qua cơ chế cấp phép của hệ thống và giành lấy mức truy cập cao hơn, vượt quá những gì được dự định hoặc được hưởng đối với người dùng sau đó thu thập những dữ liệu nhạy cảm, bảo mật.', 'Rất khó để nhận ra là mình đang trong cuộc tấn công bằng lỗ hổng bảo mật này vì những kẻ tấn công có thể sử dụng các đặc quyền nâng cao để che dấu vết của chúng bằng cách xóa nhật ký truy cập và bằng chứng khác về hoạt động của chúng. Điều này có khả năng khiến nạn nhân không biết rằng một cuộc tấn công đã xảy ra. Bằng cách đó, tội phạm mạng có thể ngấm ngầm đánh cắp thông tin hoặc cài đặt phần mềm độc hại trực tiếp trong hệ thống', 'Ngăn chặn Privilege Escalation là một phần quan trọng của bảo mật hệ điều hành. Dưới đây là một số biện pháp mà bạn có thể thực hiện để ngăn chặn Privilege Escalation:<br>\r\nNguyên tắc nguyên tắc lựa chọn tối thiểu (Principle of Least Privilege):\r\nGán quyền hạn tối thiểu cần thiết cho người dùng và các quyền hạn của quá trình.\r\nTránh cung cấp quyền đặc quyền cao hơn so với những gì người dùng hay ứng dụng thực sự cần.\r\nQuản lý tài khoản:<br>\r\nChắc chắn rằng mật khẩu cho tài khoản quản trị là mạnh và được đổi thường xuyên.\r\nKhông sử dụng tài khoản quản trị cho các nhiệm vụ hàng ngày.<br>\r\nKiểm soát quyền truy cập file và thư mục:<br>\r\nÁp dụng nguyên tắc \"need-to-know\" khi cấu hình quyền truy cập file và thư mục.\r\nKiểm soát quyền hạn sử dụng Access Control Lists (ACLs) để giới hạn quyền truy cập.\r\n<br>Kiểm soát quyền truy cập dịch vụ và ứng dụng:<br>\r\nTắt hoặc giảm quyền truy cập dịch vụ và ứng dụng không cần thiết.\r\nKiểm tra và cập nhật các cài đặt mặc định của hệ thống để giảm thiểu các dịch vụ chạy tự động.\r\n<br>Theo dõi và ghi nhật ký:<br>\r\nKích hoạt và giám sát các nhật ký hệ thống để phát hiện những hoạt động bất thường.\r\nSử dụng giải pháp SIEM (Security Information and Event Management) để theo dõi và phân tích nhật ký.<br>\r\nCập nhật hệ thống định kỳ:<br>\r\nGiữ cho hệ điều hành và các ứng dụng cập nhật với các bản vá và bản cập nhật an ninh mới nhất để đảm bảo bảo mật tốt nhất.<br>\r\nQuản lý và kiểm soát dịch vụ:<br>\r\nTắt các dịch vụ không cần thiết và giữ chỉ các dịch vụ quan trọng.\r\nSử dụng các phương tiện chặn và kiểm soát để giới hạn quyền truy cập dịch vụ.<br>\r\nCấu hình UAC (User Account Control) đúng cách:<br>\r\nBật UAC để cung cấp cảnh báo và xác nhận từ người dùng khi có những thay đổi quan trọng. \r\n', 'Lỗ Hổng Privilege Escalation ( Nâng quyền hạn)'),
(28, 'Lỗ hổng zero-day bản chất là những lỗ hổng bảo mật của phần mềm hoặc phần cứng chưa được phát hiện. Chúng tồn tại trong nhiều môi trường như: website, ứng dụng mobile, hệ thống mạng doanh nghiệp, phần mềm – phần cứng máy tính, thiết bị IoT, cloud, v.v… Sự khác nhau giữa một lỗ hổng bảo mật thông thường và một lỗ hổng zero-day nằm ở chỗ: Lỗ hổng Zero-day là những lỗ hổng chưa được biết tới bởi đối tượng sở hữu hoặc cung cấp sản phẩm chứa lỗ hổng. Trong thuật ngữ bảo mật máy tính, ngày mà bên cung cấp sản phẩm chứa lỗ hổng biết tới sự tồn tại của lỗ hổng đó, gọi là “ngày 0”. Đó là lý do thuật ngữ lỗ hổng Zero ra đời. Thông thường ngay sau khi phát hiện ra lỗ hổng 0-day, bên cung cấp sản phẩm sẽ tung ra bản vá bảo mật cho lỗ hổng này để người dùng được bảo mật tốt hơn. Tuy nhiên trên thực tế, người dùng ít khi cập nhật phiên bản mới của phần mềm ngay lập tức. Điều đó khiến cho Zero-day được biết đến là những lỗ hổng rất nguy hiểm, có thể gây thiệt hại nghiêm trọng cho doanh nghiệp và người dùng.', '', 'Cập nhật phần mềm và hệ điều hành<br>\r\nĐầu tiên, bạn nên tiến hành cài đặt các bản cập nhật phần mềm từ nhà sản xuất. Điều này giúp giảm thiểu nguy cơ lây nhiễm phần mềm độc hại và rủi ro bị tin tặc khai thác lỗ hổng. Các bản cập nhật phần mềm thường bao gồm các bản vá lỗ hổng bảo mật quan trọng nhất mới được phát hiện gần đây từ nhà sản xuất. Ngoài ra, cần liên tục cập nhật hệ điều hành máy trạm và máy chủ (Windows, macOS, Linux,…) để tránh những rủi ro tấn công zero-day có thể xảy ra. Điều này đồng nghĩa với việc không sử dụng phần mềm và hệ điều hành không có bản quyền, bởi sẽ rất khó khăn trong quá trình cập nhật.<br>\r\nTriển khai giám sát bảo mật theo thời gian thực<br>\r\nVới công nghệ học máy (machine-learning), các giải pháp giám sát thông minh có thể phát hiện và cảnh báo những hoạt động đáng ngờ hoặc các mối đe dọa (threats) theo thời gian thực. Từ đó bảo vệ máy chủ, máy trạm, và hệ thống của bạn khỏi các mối đe dọa từ zero-day attack.\r\n<br>\r\nTriển khai hệ thống IDS và IPS<br>\r\n-Hệ thống phát hiện xâm nhập (IDS) và Hệ thống ngăn chặn xâm nhập (IPS) có thể bảo vệ hệ thống của bạn chống lại những kẻ xâm nhập đã biết và chưa biết. Chúng có thể không phát hiện ra các mối đe dọa mọi lúc, nhưng chúng sẽ cảnh báo về các hoạt động đáng ngờ của tin tặc.<br>\r\nSử dụng phần mềm quét lỗ hổng bảo mật<br>\r\nLớp phòng thủ thứ hai bạn nên có là các phần mềm bảo mật chuyên dụng. Việc có một ứng dụng bảo mật tự động giúp giảm thiểu chi phí đáng kể so với các dịch vụ tư vấn từ chuyên gia. Quan trọng hơn, các ứng dụng này giúp bạn sớm phát hiện lỗ hổng bảo mật trên website và đưa ra những khuyến cáo phù hợp để giải quyết chúng kịp thời.<br>\r\nTriển khai bộ công cụ kiểm soát truy cập mạng<br>\r\nKiểm soát truy cập mạng (NAC) là một phương pháp để triển khai các chính sách bảo mật hoặc ngăn chặn trên network. Nó giúp bảo vệ các hệ thống quan trọng nhất của bạn tách biệt khỏi các hệ thống khác. Vì vậy, NAC có thể cấm các hệ thống bị tấn công truy cập vào các hệ thống quan trọng để phòng tránh rủi ro bị tấn công zero-day cho toàn hệ thống.\r\n\r\n\r\n\r\n\r\n', 'Lỗ Hổng Zero-day'),
(29, 'OS command injection vulnerabilities chỉ loại lỗ hổng cho phép kẻ tấn công \"injection\" và thực thi tùy ý các câu lệnh tương ứng với hệ điều hành (OS) đang vận hành của hệ thống. Bởi vậy kiểu tấn công này còn có một tên gọi khác là Shell injection. Đây là một trong những lỗ hổng nguy hiểm nhất, thường được đánh giá trong khoảng 9.0−10.0 trong điểm CVSS. Vì khi kẻ tấn công thực thi các lệnh shell tại hệ thống sẽ có thể trực tiếp xâm nhập máy chủ, chuyển cuộc tấn công tới các hệ thống khác trong tổ chức.', 'Khi kiểm tra tấn công OS command injection thành công trên mục tiêu, kẻ tấn công có thể khai thác hệ thống theo một số hướng sau: định danh người dùng hiện tại bằng lệnh whoami, liệt kê tên tệp, thư mục bằng ls, đọc file với các lệnh cat, tac, head, tail, … <br>', 'Cách tốt nhất để ngăn chặn lỗ hổng này có lẽ là loại bỏ hoàn toàn việc sử dụng các lệnh shell trong quá trình sản phẩm hoạt động. Nên thay thế chúng bằng cách sử dụng các API đã được kiểm chứng là an toàn và bảo mật. Đôi khi, một hệ thống không thể tránh khỏi việc sử dụng các input từ người dùng truyền vào các lệnh shell, có thể thực hiện một số biện pháp ngăn chặn sau đây:<br>\r\n-Có một quá trình kiểm tra chặt chẽ đầu vào từ người dùng như ngăn chặn tất cả các ký tự đặc biệt không cần thiết, yêu cầu input cần tuân theo một regular expression cụ thể.<br>\r\n-Sử dụng kết hợp blacklist, whitelist các từ khóa.\r\n', 'Lỗ Hổng Command injection'),
(30, 'Path traversal hay còn gọi là Directory traversal là một lỗ hổng bảo mật cho phép kẻ tấn công đọc các file tùy ý trên server. Nó dẫn đến việc bị lộ thông tin nhạy cảm của ứng dụng web như thông tin đăng nhập, một số file hoặc thư mục hệ điều hành.', 'Ví dụ 1 trang web sẽ có tag load hình ảnh như thế này<br>\r\n<img src=\"1.png\"><br>\r\nVà path chứa ảnh sẽ là như này /var/www/images/218.png <br>\r\nTrong trường hợp này loadImage sẽ nhận tham số truyền vào là filename và lấy image từ trong path được load lên. Kẻ tấn công có thể tấn công vào bằng cách truy cập vào https://insecure-website.com/loadImage?filename=../../../etc/passwd /etc/passwd -> đường dẫn chứa thông tin của user trong hệ thống linux <br>\r\nĐường dẫn khi server nhận vào xử lý sẽ là như này /var/www/images/../../../etc/passwd (../ để trở ra 1 cấp thư mục)<br>\r\nVà chuyện tới cũng tới, hệ thống sẽ thản nhiên thực hiện command từ phía back-end và trả ra response của file passwd.\r\n\r\n\r\n', 'Giai đoạn phát triển:<br>\r\n-Lọc ra các ký tự đầu vào nhằm ngăn chặn người dùng sử dụng các dấu phân cách truy cập tới API hệ thống tệp.<br>\r\nXác thực đầu vào của người dùng trước khi xử lý bằng whitelist các giá trị được phép, còn nếu không thể tránh khỏi việc phải sử dụng path truy cập thì phải xác thực được nội dung cho phép truy cập (ví dụ như các kí tự phải hoàn toàn là chữ và số)<br>\r\n-Sau khi xác thực đầu vào, ứng dụng sẽ thêm đầu vào vào base directory và sử dụng API hệ thống để chuẩn hóa đường dẫn. Nó sẽ xác minh rằng đường dẫn được chuẩn hóa bắt đầu với base directory.<br>\r\nGiai đoạn release:<br>\r\n-Bằng cách sử dụng WAF (Web Application Firewall) chúng ta sẽ có thêm 1 lớp bảo mật nữa từ giai đoạn đang phát triển.<br>\r\n-Cấu hình lọc các chuỗi đầu vào từ người dùng\r\n', 'Lỗ Hổng Path traversal'),
(31, '', 'Ứng dụng yêu cầu quyền truy cập không cần thiết hoặc quyền truy cập được yêu cầu quá rộng lớn so với chức năng thực tế của ứng dụng.<br>\r\nVí dụ: Một ứng dụng ghi âm yêu cầu quyền truy cập vào máy ảnh và danh bạ người dùng mặc dù không liên quan đến chức năng của nó.\r\n', 'Giảm thiểu quyền truy cập yêu cầu tối thiểu cần thiết cho hoạt động của ứng dụng và cung cấp lời giải thích cho người dùng về việc tại sao ứng dụng cần quyền truy cập đó.', 'Lỗ Hổng phân quyền (Permission Issues)'),
(32, '', 'Sự xuất hiện của các hành vi bất thường hoặc chức năng không mong muốn trong ứng dụng, hoặc thông báo về việc ứng dụng được cấp quyền thực hiện các hành động không mong muốn.<br>\r\nVí dụ: Một ứng dụng bị nhiễm mã độc có thể tự động gửi tin nhắn hoặc cuộc gọi không mong muốn từ điện thoại của người dùng.\r\n', 'Kiểm tra mã nguồn của ứng dụng, tránh sử dụng mã nguồn không tin cậy, và sử dụng các công cụ chống mã độc như mã hóa, mã hóa kỹ thuật số, và chữ ký số.\r\n', 'Lỗ Hổng mã độc (Malicious Code Vulnerabilities)'),
(33, '', 'Người dùng có thể truy cập vào tài khoản của nhau hoặc ứng dụng không chấm dứt phiên làm việc đúng cách sau khi người dùng đăng xuất.<br>\r\nVí dụ: Một người dùng có thể tiếp tục truy cập vào tài khoản của mình ngay cả sau khi họ đã đăng xuất vì phiên làm việc vẫn còn hiệu lực.\r\n', 'Theo dõi và cập nhật các thư viện mã nguồn mở định kỳ, sử dụng các công cụ tự động để phát hiện lỗ hổng bảo mật, và thường xuyên kiểm tra xem có các bản cập nhật hoặc vá lỗi nào cho các thư viện được sử dụng không.\r\n', 'Lỗ Hổng quản lý phiên (Session Management Issues)'),
(34, '', 'Dấu hiệu: Sự tồn tại của các lỗ hổng bảo mật trong thư viện mã nguồn mở được sử dụng trong ứng dụng.<br>\r\nVí dụ: Một thư viện mã nguồn mở phổ biến được sử dụng trong ứng dụng có một lỗ hổng bảo mật đã được công bố và hacker có thể tận dụng nó để tấn công ứng dụng.\r\n', 'Theo dõi và cập nhật các thư viện mã nguồn mở định kỳ, sử dụng các công cụ tự động để phát hiện lỗ hổng bảo mật, và thường xuyên kiểm tra xem có các bản cập nhật hoặc vá lỗi nào cho các thư viện được sử dụng không.\r\n', 'Lỗ Hổng mã nguồn mở (Open Source Vulnerabilities)'),
(35, '', 'Ứng dụng không được thử nghiệm đúng cách trên các thiết bị di động khác nhau, dẫn đến việc không phát hiện ra các lỗi hoặc lỗ hổng bảo mật có thể xuất hiện trên một số thiết bị.<br>\r\nVí dụ: Một ứng dụng có thể hoạt động tốt trên một loại điện thoại nhưng gặp sự cố hoặc lỗ hổng trên các loại điện thoại khác.\r\n', 'Thực hiện kiểm thử đa nền tảng trên nhiều thiết bị di động khác nhau để đảm bảo tính tương thích và bảo mật.\r\n', 'Lỗ Hổng kiểm thử trên thiết bị di động (Mobile Device Testing Issues)'),
(36, '', 'Dữ liệu người dùng được lưu trữ trong bộ nhớ hoặc cơ sở dữ liệu không được mã hóa hoặc bảo vệ đúng cách.<br>\r\nVí dụ: Mật khẩu người dùng được lưu trữ dưới dạng văn bản không mã hóa trong cơ sở dữ liệu của ứng dụng.\r\n', 'Sử dụng các cơ chế mã hóa mạnh mẽ để bảo vệ dữ liệu người dùng, tránh lưu trữ thông tin nhạy cảm mà không cần thiết, và sử dụng cơ chế quản lý khóa an toàn.\r\n', 'Lỗ Hổng từ việc sử dụng dữ liệu không an toàn (Insecure Data Storage)'),
(37, '', 'Dữ liệu nhạy cảm của ứng dụng hoặc thông tin đăng nhập có thể bị rò rỉ từ bộ nhớ.\r\n<br>Ví dụ: Dữ liệu đăng nhập được lưu trữ trong bộ nhớ không được xoá sau khi người dùng đăng xuất khỏi ứng dụng.', 'Đảm bảo rằng dữ liệu nhạy cảm được xử lý và xoá một cách an toàn sau khi không cần thiết, sử dụng các biện pháp bảo vệ như mã hóa hoặc token hợp lệ.\r\n', 'Lỗ Hổng từ việc sử dụng bộ nhớ không an toàn (Insecure Memory Handling)'),
(38, '', 'Sự kết nối với các dịch vụ bên ngoài không được mã hóa hoặc không được xác thực đúng cách.<br>\r\nVí dụ: Gửi thông tin người dùng qua mạng không an toàn hoặc không sử dụng giao thức bảo mật như HTTPS khi giao tiếp với các dịch vụ bên ngoài.\r\n', 'Sử dụng giao thức an toàn như HTTPS cho tất cả các kết nối với dịch vụ bên ngoài, và xác thực và ủy quyền đúng cách cho các yêu cầu.\r\n', 'Lỗ Hổng từ việc sử dụng dịch vụ bên ngoài không an toàn (Insecure External Services)');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `main_tbl`
--
ALTER TABLE `main_tbl`
  ADD PRIMARY KEY (`ID`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `main_tbl`
--
ALTER TABLE `main_tbl`
  MODIFY `ID` int(10) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=39;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
